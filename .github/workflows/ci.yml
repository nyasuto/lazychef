name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        cd backend
        go mod download
        go mod tidy
        
    - name: Run quality checks
      run: make quality
      
    - name: Check if code is properly formatted
      run: |
        cd backend
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code is not properly formatted"
          gofmt -l .
          exit 1
        fi
        
    - name: Run Go vet
      run: |
        cd backend
        go vet ./...
        
    - name: Run tests with coverage
      run: |
        cd backend
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Build application
      run: make build
      
    - name: Test application startup
      run: |
        cd backend
        timeout 10s go run cmd/api/main.go || code=$?
        if [ $code -ne 124 ] && [ $code -ne 0 ]; then
          echo "Application failed to start properly"
          exit 1
        fi
        echo "Application started successfully"

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Run Gosec Security Scanner
      run: |
        cd backend
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out ../gosec-results.sarif ./...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Check for known vulnerabilities
      run: |
        cd backend
        go list -json -m all | docker run --rm -i sonatypecommunity/nancy:latest sleuth